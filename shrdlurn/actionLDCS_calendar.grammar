### temp

# (rule $Set ($twentyfour) (lambda a (and (call after start_datetime (call todaystart)) (call before start_datetime (call addtime (call todaystart) (call numberunit (var a) (string hours)))))) (floating 1))
# (rule $twentyfour (nothing) (ConstantFn (number 24)) (floating 1))


(rule $Set (today) (ConstantFn (and (call after start_datetime (call todaystart)) (call before start_datetime (call addtime (call todaystart) (number 24 hours))))) (anchored 1))

(rule $Set (tomorrow) (ConstantFn (and (call after start_datetime (call addtime (call todaystart) (number 24 hours))) (call before start_datetime (call addtime (call todaystart) (number 48 hours))))) (anchored 1))


(rule $Select (nothing) (ConstantFn (: add)) (floating 1))

(rule $Select ($Set) (lambda s (: select (var s))) (floating 1))
(rule $ROOT ($Select) (IdentityFn) (floating 1))

#(rule $Check (nothing) (ConstantFn (number 5)) (floating 1))
#(rule $Check2 ($Check) (IdentityFn) (floating 1))
#(rule $Action ($Check2) (IdentityFn) (floating 1))

# for debugging
(rule $Duration (10) (ConstantFn (call numberunit (number 10) (string minutes))) (anchored 1))
(rule $Duration (10) (ConstantFn (call numberunit (number 10) (string hours))) (anchored 1))
(rule $Duration (10) (ConstantFn (call numberunit (number 10) (string days))) (anchored 1))


# go 5 minutes -> [5, 0] and produces addtime results

### units

# (rule $Unit ($TOKEN) (UnitFn))
# (rule $Actions ($Unit) (IdentityFn) (anchored 1))
# (rule $NumberUnit ($Number $Unit) (lambda n (lambda u ((var n) (var u)))) (floating 1))
# (rule $Action ($NumberUnit) (IdentityFn) (floating 1))

### general

(rule $Select ($Sets) (lambda s (: select (var s))) (floating 1))
(rule $Select (all) (ConstantFn (: select *)) (anchored 1))

(rule $Actions ($Select $Action) (lambda s (lambda a (:s (var s) (var a)))) (floating 1)) # chain a select and an action

(for @rel (title, location, duration, start_weekday, end_weekday, start_date, end_date, start_time, end_time, start_datetime end_datetime, repeat)
     (rule $Rel (nothing) (ConstantFn @rel) (anchored 1))
)

### numbers

(rule $Number ($TOKEN) (NumberFn) (anchored 1))
(rule $Duration ($Number) (lambda n (call numberunit (var n) (string minutes))) (anchored 1))
(rule $Duration ($Number) (lambda n (call numberunit (var n) (string hours))) (anchored 1))
(rule $Duration ($Number) (lambda n (call numberunit (var n) (string days))) (anchored 1))

(for @num (1 2 3 4 5 6 7)
(rule $Weekday (@num) (ConstantFn (number @num)) (anchored 1))
)


# actions

(rule $Action ($Weekday) (lambda d (: move end_weekday (var d))) (anchored 1))
(rule $Action ($Weekday) (lambda d (: move start_weekday (var d))) (anchored 1))
(rule $Action ($Weekday) (lambda d (: update end_weekday (var d))) (anchored 1))
(rule $Action ($Weekday) (lambda d (: update start_weekday (var d))) (anchored 1))
(rule $Action ($Duration) (lambda d (: update duration (var d))) (anchored 1))


# select

(rule $Set ($Weekday) (lambda d (end_weekday (var d))) (floating 1))
(rule $Set ($Weekday) (lambda d (start_weekday (var d))) (floating 1))
(rule $Set ($Duration) (lambda d (duration (var d))) (floating 1))

#### dates

(rule $Date ($PHRASE) (DateFn))

(rule $Action ($Date) (lambda d (: move end_date (var d))) (floating 1))
(rule $Action ($Date) (lambda d (: move start_date (var d))) (floating 1))
(rule $Action ($Date) (lambda d (: update end_date (var d))) (floating 1))
(rule $Action ($Date) (lambda d (: update start_date (var d))) (floating 1))

(rule $Set ($Date) (lambda d (start_date (var d))) (floating 1))
(rule $Set ($Date) (lambda d (end_date (var d))) (floating 1))

#### datetime

(rule $Action ($DateTime) (lambda d (: move end_datetime (var d))) (floating 1))
(rule $Action ($DateTime) (lambda d (: move start_datetime (var d))) (floating 1))
(rule $Action ($DateTime) (lambda d (: update end_datetime (var d))) (floating 1))
(rule $Action ($DateTime) (lambda d (: update start_datetime (var d))) (floating 1))

(rule $Set ($DateTime) (lambda d (start_datetime (var d))) (floating 1))
(rule $Set ($DateTime) (lambda d (end_datetime (var d))) (floating 1))

### title and location

(rule $Word ($TOKEN) (IdentityFn))
#(rule $Set ($Word) (lambda t (title (var t))) (floating 1)) 
#(rule $Action ($Word) (lambda t (: update title (var t))) (floating 1))
#(rule $Set ($Word) (lambda t (location (var t))) (floating 1))
#(rule $Action ($Word) (lambda t (: update location (var t))) (floating 1))


### time

(rule $Time ($PHRASE) (TimeFn))

(rule $Action ($Time) (lambda d (: move end_time (var d))) (floating 1))
(rule $Action ($Time) (lambda d (: move start_time (var d))) (floating 1))
(rule $Action ($Time) (lambda d (: update end_time (var d))) (floating 1))
(rule $Action ($Time) (lambda d (: update start_time (var d))) (floating 1))

(rule $Set ($Time) (lambda d (start_time (var d))) (floating 1))
(rule $Set ($Time) (lambda d (end_time (var d))) (floating 1))

### call functions

# addtime

(rule $DateTimeSet ($DateTime) (IdentityFn) (floating 1))
(rule $DateTime ($DateTimeSet $Duration) (lambda s (lambda d (call addtime (var s) (var d)))) (anchored 1))

#pick

(rule $Set ($Word $Set) (lambda w (lambda s (call pick_first start_datetime (var s)))) (anchored 1))
(rule $Set ($Word $Set) (lambda w (lambda s (call pick_first end_datetime (var s)))) (anchored 1))

(rule $Set ($Word $Set) (lambda w (lambda s (call pick_last start_datetime (var s)))) (anchored 1))
(rule $Set ($Word $Set) (lambda w (lambda s (call pick_last end_datetime (var s)))) (anchored 1))

# anchored times

(rule $DateTime (month) (ConstantFn (call monthstart)) (anchored 1))
(rule $DateTime (week) (ConstantFn (call weekstart)) (anchored 1))
(rule $DateTime (today) (ConstantFn (call todaystart)) (anchored 1))
(rule $DateTime (tomorrow) (ConstantFn (call addtime (call todaystart) (call numberunit (number 24) (string hours)))) (anchored 1))
(rule $DateTime (now) (ConstantFn (call now)) (anchored 1))

# time ranges

(rule $Set ($DateTime) (lambda d (call after start_datetime (var d))) (floating 1))
(rule $Set ($DateTime) (lambda d (call after end_datetime (var d))) (floating 1))
(rule $Set ($DateTime) (lambda d (call before start_datetime (var d))) (floating 1))
(rule $Set ($DateTime) (lambda d (call before end_datetime (var d))) (floating 1))

# 


### reverse

(rule $DateTimeSet ($Set) (lambda s ((reverse start_datetime) (var s))) (floating 1))
(rule $DateTimeSet ($Set) (lambda s ((reverse end_datetime) (var s))) (floating 1))

(rule $DateSet ($Set) (lambda s ((reverse start_date) (var s))) (floating 1))
(rule $DateSet ($Set) (lambda s ((reverse end_date) (var s))) (floating 1))

(rule $TimeSet ($Set) (lambda s ((reverse start_time) (var s))) (floating 1))
(rule $TimeSet ($Set) (lambda s ((reverse end_time) (var s))) (floating 1))

(rule $DurationSet ($Sets) (lambda s ((reverse duration) (var s))) (floating 1))

(rule $TitleSet ($Set) (lambda s ((reverse title) (var s))) (floating 1))
(rule $TitleSet ($Set) (lambda s ((reverse location) (var s))) (floating 1))


#############################################################################
#############################################################################
#############################################################################

(include flatworld.grammar)

# contextful top level functions
# command:
(def @put put)
(def @base base)
# basic actions
(def @add add)
(def @move move)

# extended set ops
(def @veryx veryx)
# commands
(def @reset reset) # reset the world

# typed lambdas
# Action a, ItemSet i, ValueSet v, Rel r, Direction d, Color c, Number n
# This grammar should have Rule.defaultIsFloating false

########### domain specific grammar

# utilities
(rule $Action (reset) (ConstantFn (: reset (string default))) (anchored 1))
(rule $Action (reset $TOKEN) (lambda n (: reset (var n))) (anchored 1))
(rule $Action (base $Number $Number) (lambda x (lambda y (: @base (var x) (var y)))) (anchored 1))
(rule $ROOT (_contextcmd) (ConstantFn (string "(context (graph NaiveKnowledgeGraph ((string [[1,3,1,\"Green\",[]],[2,2,1,\"Blue\",[]],[1,3,2,\"Red\",[]]]) (name b) (name c))))")) (anchored 1))


(rule $ValueSet ($Color) (IdentityFn) (anchored 1))
#(rule $ValueSet ($Number) (IdentityFn) (anchored 1))			 


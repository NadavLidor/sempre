package edu.stanford.nlp.sempre;

import fig.basic.LispTree;
import fig.basic.LogInfo;

/**
 * Created by joberant on 1/23/15.
 * Value for representing time
 */
public class TimeValue extends Value {

  public final int hour;
  public final int minute;
  
  public final int year;
  public final int month;
  public final int day;
  public final int weekday;

  // timeStr format is THH:MM:SS (M and S optional)
  public static TimeValue parseTimeValue(String timeStr) {
	
  	// extract date
  	int year = -1;
  	int month = -1;
  	int day = -1;
  	
  	int weekday = -1;
  	
  	//extract hour 
  	int hour = -1;
  	int minute = -1;
  
  	if (timeStr.charAt(0) != 'T') { // dateTime
  		String dateStr = timeStr.substring(0, timeStr.indexOf('T'));
  		
  		String maybeYear = dateStr.substring(0, 4);
    	if (!maybeYear.equals("XXXX")) {
    		try {
      		year = Integer.parseInt(maybeYear);
      	} catch (NumberFormatException e) {} // do nothing on exception
    	}
    	
    	// check if weekday
    	if (dateStr.charAt(5) == 'W') {
    		try {
      		weekday = Character.getNumericValue(dateStr.charAt(5));
      	} catch (NumberFormatException e) {} // do nothing on exception
    	}

    	// else check if month / day
    	else {      	
      	String maybeMonth = dateStr.substring(5, 7);
      	if (!maybeMonth.equals("XX")) {
      		try {
        		month = Integer.parseInt(maybeMonth);
        	} catch (NumberFormatException e) {} // do nothing on exception
      	}
      	String maybeDay = dateStr.substring(8, 10);
      	if (!maybeDay.equals("XX")) {
      		try {
        		day = Integer.parseInt(maybeDay);
        	} catch (NumberFormatException e) {} // do nothing on exception
      	}
    	} 	
  	}
  	
  	// extract time
  	String hourStr = timeStr.substring(timeStr.indexOf('T'), timeStr.length());
  	
  	try {
  		hour = Integer.parseInt(hourStr.substring(1, 3));
  	} catch (NumberFormatException e) {} // do nothing on exception
  	
  	
  	// extract minute
  	if (hourStr.length() >= 5) {
    	try {
    		minute = Integer.parseInt(hourStr.substring(4, 6));
    	} catch (NumberFormatException e) {} // do nothing on exception
  	}
		
		return new TimeValue(year, month, day, hour, minute, weekday);
	
  }
  
  public TimeValue(int year, int month, int day, int hour, int minute, int weekday) {
    if (hour > 23 || hour < 0) throw new RuntimeException("Illegal hour: " + hour);
    if (minute > 59 || minute < 0) throw new RuntimeException("Illegal minute: " + minute);
    if (month > 12 || month < 1) throw new RuntimeException("Illegal month: " + month);
    if (day > 31 || day < 1) throw new RuntimeException("Illegal day: " + day);
    if (weekday > 7 || minute < 1) throw new RuntimeException("Illegal weekday: " + weekday);
    if (year < 0) throw new RuntimeException("Illegal minute: " + year);
    
    this.year = year;
    this.month = month;
    this.day = day;
    this.hour = hour;
    this.minute = minute;
    this.weekday = weekday;

  }

  public TimeValue(LispTree tree) {
    this.hour = Integer.valueOf(tree.child(1).value);
    this.minute = Integer.valueOf(tree.child(2).value);
    this.year = Integer.valueOf(tree.child(3).value);
    this.month = Integer.valueOf(tree.child(4).value);
    this.day = Integer.valueOf(tree.child(5).value);
    this.weekday = Integer.valueOf(tree.child(6).value);
  }

  @Override
  public LispTree toLispTree() {
    LispTree tree = LispTree.proto.newList();
    tree.addChild("time");
    
    tree.addChild(String.valueOf(year));
    tree.addChild(String.valueOf(month));
    tree.addChild(String.valueOf(day));
    tree.addChild(String.valueOf(hour));
    tree.addChild(String.valueOf(minute));
    tree.addChild(String.valueOf(weekday));
    return tree;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    TimeValue timeValue = (TimeValue) o;
    if (hour != timeValue.hour) return false;
    if (minute != timeValue.minute) return false;
    return true;
  }

  @Override
  public int hashCode() {
    int result = hour;
    result = 31 * result + minute;
    return result;
  }
  
  // return true if this TimeValue is after other TimeValue
  public boolean isAfter(TimeValue other) {
  	return ((this.hour > other.hour) || (this.hour == other.hour && this.minute > other.minute));
  }
  
  // return true if this TimeValue is before other TimeValue
  public boolean isBefore(TimeValue other) {
  	return ((this.hour < other.hour) || (this.hour == other.hour && this.minute < other.minute)); 
  }
  

}
